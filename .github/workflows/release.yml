name: Build Release Publish
on:
  push:
    branches:
    - 'main'
  workflow_dispatch:

permissions: {}

defaults:
  run:
    shell: bash

env:
  development_node_version: 18.12.1

jobs:
  # Gate the build -> release -> publish jobs with the test workflow.
  test:
    name: 🧪 CI
    permissions:
      actions: read
      contents: read
      security-events: write
    uses: ./.github/workflows/test.yml

  # 🛑 Check both whether the package's version field has changed, and if that
  # version's value already exists in a known release, to determine if we should
  # proceed with building and releasing.
  workflow-conditions:
    name: 🛑 Stop release collisions
    runs-on: ubuntu-latest
    outputs:
      version-file-changed: ${{ steps.version-file-check.outputs.version-file-changed }}
      version-tag-exists: ${{ steps.version-tag-exists.outputs.version-tag-exists }}
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Check if version files changed
      id: version-file-check
      run: |
        export VERSION_FILE="package.json"
        [ "$(git diff HEAD^1.. --name-only | grep -e "^$VERSION_FILE$")" == "$VERSION_FILE" ] && echo "version-file-changed=${{toJSON(true)}}" >> $GITHUB_OUTPUT || echo "version-file-changed=${{toJSON(false)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-file-check
      run: echo "::Notice::version-file-changed is ${{ fromJSON(steps.version-file-check.outputs.version-file-changed) }}"
    - name: Check if version specified in version file has not released.
      id: version-tag-exists
      run: |
        git fetch --tags
        export VER=$(grep package.json -e "\"version\":" | cut -d \" -f 4)
        [ -z "$(git tag -l "v$VER")" ] && echo "version-tag-exists=${{toJSON(false)}}" >> $GITHUB_OUTPUT || echo "version-tag-exists=${{toJSON(true)}}" >> $GITHUB_OUTPUT
    - name: Notify on version-tag-exists
      run: echo "::Notice::version-tag-exists is ${{ fromJSON(steps.version-tag-exists.outputs.version-tag-exists) }}"

  # We want to build release and publish automatically if "version-file-changed"
  # is true on push. Or manually if workflow_dispatch.
  # Both triggers need "version-tag-exists" is false.
  build-npm:
    name: Build NPM 🧱
    needs: [test, workflow-conditions]
    if: >-
      ${{ ((fromJSON(needs.workflow-conditions.outputs.version-file-changed) == true && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch') && fromJSON(needs.workflow-conditions.outputs.version-tag-exists) == false }}
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🟩 Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.development_node_version }}
    - name: 🧱 Install build dependencies
      run: npm run setup
    - name: 🧱 Build
      run: npm pack
    - name: 🆙 Upload dists
      uses: actions/upload-artifact@v3
      with:
        name: npm-package
        path: pretty-ts-errors-*.tgz
        if-no-files-found: error

  build-vsce:
    name: Build VSCE 🧱
    needs: [test, workflow-conditions]
    if: >-
      ${{ ((fromJSON(needs.workflow-conditions.outputs.version-file-changed) == true && github.event_name == 'push') ||
      github.event_name == 'workflow_dispatch') && fromJSON(needs.workflow-conditions.outputs.version-tag-exists) == false }}
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🟩 Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.development_node_version }}
    - name: 🧱 Install build dependencies
      run: npm run setup
    - name: 🧱 Build
      run: npm run build
    - name: 🆙 Upload dists
      uses: actions/upload-artifact@v3
      with:
        name: vsce-package
        path: pretty-ts-errors-*.vsix
        if-no-files-found: error

  release:
    name: Release 🚰
    needs: [build-npm, build-vsce]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🆒 Download dists
      uses: actions/download-artifact@v3
    - name: 🚰 Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: >-
        export VER=$(grep package.json -e "\"version\":" | cut -d \" -f 4) &&
        gh release create v$VER --generate-notes -t "v$VER" --draft
        "$(find . | grep -e npm-package/pretty-ts-errors-*\.tgz)#npm package"
        "$(find . | grep -e vsce-package/pretty-ts-errors-*\.vsix)#vsce package"

  publish-github:
    name: Publish GitHub 🐱‍👤
    needs: [release]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🆒 Download dists
      uses: actions/download-artifact@v3
      with:
        name: npm-package
    - name: 🟩 Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.development_node_version }}
        registry-url: 'https://npm.pkg.github.com'
    - name: 📦 Publish
      run: npm run workflow_publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish NPM 🟥
    needs: [release]
    runs-on: ubuntu-latest
    steps:
    - name: 🏁 Checkout
      uses: actions/checkout@v3
    - name: 🆒 Download dists
      uses: actions/download-artifact@v3
      with:
        name: npm-package
    - name: 🟩 Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.development_node_version }}
        registry-url: 'https://registry.npmjs.org'
    - name: 📦 Publish
      run: npm run workflow_publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
